1) создаем папку в редактор VS
2) заходим в эту папку через BUSH (cd .. /  ls )
3) производим инициализацию (git init)
4) проверяем что сейчас происходит с файлами (git status) , показывает файлы которые не закомичены и на какой етке находимся
5) добавляем файл в репозиторий чтобы за ним следить ( git add "name file"(добавляет один файл) или git add . (добавляет 
						      все файлы)
6) перестать следить за файлом ( git rm --cached "name file")
7) если изменили что-то в каком-то файле git status покажет что были изменения и будет подсвеччивать красным,
	нужно опять  прописать команду git add "name file"(добавляет один файл) или git add . (добавляет все файлы)
8) следующий этап делаем commit (git commit -m "название коммита")
9) игнорирование файлов ( создаем файл в самом проекте (в VS code) .gitignore и в нем прописываем название файла который хотим заигнорить(полное имя с расширением( 
			например script.js), после этого сам файл который мы записали в .gitignore не будет виден, но .gitignore будет виден, нужно 
			прописать для него команду для отслеживания git add ".gitignore") чтобы игнорировать папку нужно прописать в файле .gitignore 
			путь к самой папке например: /название папки, после также делаем коммит после изменений (git commit -m "название коммита")
10) создание ветки (проверка веток команда git branch), чтобы создать новую ветку пишем git branch "название ветки"
11) удаление ветки  git branch -D "название ветки"
12) переключение на другую ветку git checkout "название ветки"
13) создание веткие и мгновенное переключение на неё git checkout -b "название ветки"
14) если мы создадим какой ниббудь файл на новой ветке, то этот файл не будет показан на ветке master (либо какой нибудь другой)
15) чтобы совместить ветки и файлы были доступны везде нужно прописать команду (git merge "название ветки"(которую хотим совместить с той на которой 
			находимся, для этого сначала git status, например находимся на ветке master и у нас есть ветка newBranch, пишем команду
			git merge newBranch)
16)это все мы делали локально, теперь переходим в Github
17) создаем новый репозиторий 
18)нужно вернуться к git Bush и прописать команду git config --global user.name "name" и git config --global user.email "email" ( изменяем имя и емайл для отображения
			в репозитории)
19) нужно привязать репозиторий с Github с git Bush , команда будет написана в нашем новом репозитории на Github, команда
			git remote add origin git@github.com:vitalychepurnykh/advanced-Javascript.git
20) заливаем то что у нас локально в git Bush, командой которая находится в репозитории на Github 
			git push -u origin main      (может быть не main a master)
21) далее если мы внесем изменение в файле, то на Github они не будут отображены, нужно проверить что изменили git status , далее прописываем команду 
			( git add "name file"(добавляет один файл) или git add . (добавляет все файлы), после добавляем 
			новый коммит (git commit -m "название коммита")
22) после чтобы залить изменения на GitHub пишем команду git push
23) склонировать проект с гитхаб к себе, нужно скопировать ссылку проекта с гитхаб,далее 
			в git bush выйти из проекта, создать новую папку командой mkdir "название папки", заходим в нее cd "название папки", и дальше
			клонируем репозиторий git clone git@github.com:vitalychepurnykh/advanced-Javascript.git
24) если мы что то изменяем в новом проекте, так же нужно все закомитить и запушить (git commit -m "название коммита") и git push
25) изменения со склонированным проектом были только на github, локально gitbush не знает этого, для этого мы выходим на верхний уровень из проекта 
			и прописать команду git pull , после чего эти 2 проекта соединяться и будут видны изменения.